namespace ProjectEuler {

    class PE012 {

        public static void execute() {
            printProblemStatement();

            int triangleNumber = 0;
            int divisors = 0;
            int i = 1;
            int targetDivisors = 500;
            while (divisors < targetDivisors) {
                triangleNumber += i++;
                if (triangleNumber < targetDivisors) {
                    continue;
                }
                divisors = countDivisors(triangleNumber);
            }

            System.Console.WriteLine("Answer is {0}", triangleNumber);
        }

        private static void printProblemStatement() {
            System.Console.WriteLine("Problem 12:");
            System.Console.WriteLine("The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:");
            System.Console.WriteLine("1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...");
            System.Console.WriteLine("Let us list the factors of the first seven triangle numbers:");
            System.Console.WriteLine(" 1: 1");
            System.Console.WriteLine(" 3: 1,3");
            System.Console.WriteLine(" 6: 1,2,3,6");
            System.Console.WriteLine("10: 1,2,5,10");
            System.Console.WriteLine("15: 1,3,5,15");
            System.Console.WriteLine("21: 1,3,7,21");
            System.Console.WriteLine("28: 1,2,4,7,14,28");
            System.Console.WriteLine("We can see that 28 is the first triangle number to have over five divisors.");
            System.Console.WriteLine("What is the value of the first triangle number to have over five hundred divisors?");
            System.Console.WriteLine();
        }

        /**
         * Returns the number of divisors for a given number
         */
        private static int countDivisors(int n) {
            int limit = n;
            int count = 0;
            for (int i = 1; i < limit; i++) {
                if (n % i == 0) {
                    limit = n / i;
                    if (limit != i) {
                        count++;
                    }
                    count++;
                }
            }
            return count;
        }
        
    }

}
